
let g:coc_force_debug = 1

call plug#begin('~/.config/nvim/plugged')

Plug 'tpope/vim-sensible'
Plug 'kien/ctrlp.vim'
Plug 'flazz/vim-colorschemes'
Plug 'mileszs/ack.vim'
Plug 'rking/ag.vim'
Plug 'tpope/vim-commentary'
Plug 'terryma/vim-multiple-cursors'
Plug 'alvan/vim-closetag'
Plug 'xsbeats/vim-blade'
Plug 'godlygeek/tabular'
Plug 'aidos/vim-simpledb'
Plug 'tpope/vim-vinegar'
Plug 'jorgengz/minivimc'
Plug 'bronson/vim-trailing-whitespace'
Plug 'scrooloose/nerdtree'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'StanAngeloff/php.vim'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'hail2u/vim-css3-syntax'
Plug 'jparise/vim-graphql'


call plug#end()

" force sensible to run early so we can override some of the things is does
runtime plugin/sensible.vim



" make vim nicer, generally
" -------------------------

" no help, please
nmap <F1> <Esc>

" who enabled the mouse?!
set mouse=
" and search highlighting can go too...
set nohlsearch

" splits to the right
set splitright

" stop vim putting tmp files all over the place
set backupdir=~/.nvim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.nvim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Y to act like D and C
nnoremap Y y$

" allow switching buffers without saving
set hidden

" don't jump to the start of the line when switching buffers
set nostartofline

" remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" up and down sane when on word wrapped lines
nnoremap j gj
nnoremap k gk

" window navigation
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l

" emacs remapping for normal mode commands
cnoremap <C-a>  <Home>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Delete>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
cnoremap <M-d>  <S-right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>

" NeoVim escaping issues due to using timing to determine escape codes
set ttimeout
set ttimeoutlen=0

" files we dont really want to open generally
set wildmode=longest,list
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.pdf,*.xlsx,*.xls,.DS_Store,*/tinymce/*,*.png
set wildignore+=*.jpg,*.gif,*/static/components/*,*/node_modules/*,*/WEB-INF/railo/*,*.doc,*.docx,*node_modules*

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1



" visual changes
" --------------

colorscheme monokain

highlight Normal ctermbg=Black ctermfg=White guifg=White guibg=Black

" insert cursor as a bar
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
au VimLeave * set guicursor=a:block-blinkon0

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59



" my behavioural tweaks
" ---------------------

" easier esc from insert
imap jj <Esc>

" better leader
let mapleader = "\<Space>"


" easily get in and out of paste mode
map <leader>p :set paste!<CR>

" simple search and replace
map <leader>s :%s///g<Left><Left><Left>

" hacks to stop vinegar from taking over
nmap - -
nmap <leader>- <Plug>VinegarUp


" shortcut for Ag search:
"   f : search within current pwd directory
"   F : search within current git repo
map <leader>f :AgFromHere<Space>
map <leader>F :AgFromGit<Space>
function! Find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! -nargs=1 AgFromHere execute "Ag! --ignore=*.svg --ignore=*.svgz --ignore=*.pdf <args>"
command! -nargs=1 AgFromGit execute "Ag! --ignore=*.svg --ignore=*.svgz --ignore=*.pdf <args> " . Find_git_root()

if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore (*cough*, kinda)
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" allows us to set project folders for ctrlp
let g:ctrlp_root_markers = ['.project']
" ignore svg files in ctrlp (can't do it with wild ignore because then :e is shit)
" TODO this isn't quite right - it's not honouring end of filename
let g:ctrlp_custom_ignore = 'node_modules\|\.svg\|\.svgz|\.pdf'


" simpledb keybindings are too aggressive - switch to just single query
let g:simpledb_use_default_keybindings = 0
let g:simpledb_show_timing = 0
autocmd FileType sql nnoremap <buffer> <leader><enter> m':'{,'}SimpleDBExecuteSql<cr>g`'

" special syntax rules
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
autocmd FileType html,xhtml,xml,htmldjango,htmljinja,eruby,mako,javascript,typescript,css setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType php setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType sql setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType cf,cfm,cfc setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 formatoptions+=cq softtabstop=4 " cinwords=if,elif,else,for,while,try,except,finally,def,class,with
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
let python_highlight_all=1
let python_highlight_exceptions=0
let python_highlight_builtins=0


" Retab spaced file, but only indentation
command! RetabIndents call RetabIndents()

" Retab spaced file, but only indentation
func! RetabIndents()
    let saved_view = winsaveview()
    execute '%s@^\( \{'.&ts.'}\)\+@\=repeat("\t", len(submatch(0))/'.&ts.')@'
    call winrestview(saved_view)
endfunc

" :set ts=8     " Or whatever makes the file looks like right
" :set et       " Switch to 'space mode'
" :retab        " This makes everything spaces
" :set noet     " Switch back to 'tab mode'
" :RetabIndents " Change indentation (not alignment) to tabs
" :set ts=4     " Or whatever your coding convention says it should be

" highlight jsx in js files
let g:jsx_ext_required = 0


" ------- coc config -------------

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Some server have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap for do action format
nnoremap <silent> F :call CocActionAsync('format')<CR>

" close preview (shown for hover / signature help)
" nnoremap <leader> <Esc> :pclose<CR>
"
" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>FF  <Plug>(coc-format-selected)
nmap <leader>FF  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>

